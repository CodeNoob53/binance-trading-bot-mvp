import * as db from '../database.js';
import logger from '../logger.js';

export class PerformanceAnalyzer {
  async analyzeAllModes() {
    const modes = ['simulation', 'testnet', 'production'];
    const analysis = {};
    
    for (const mode of modes) {
      const trades = await db.allAsync(
        'SELECT * FROM trades WHERE mode = ? ORDER BY entryTime',
        [mode]
      );
      
      if (trades.length === 0) continue;
      
      analysis[mode] = this.analyzeTrades(trades);
    }
    
    return analysis;
  }
  
  analyzeTrades(trades) {
    const completed = trades.filter(t => t.status !== 'ACTIVE');
    const winners = completed.filter(t => t.profitLoss > 0);
    const losers = completed.filter(t => t.profitLoss <= 0);
    
    // –ê–Ω–∞–ª—ñ–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
    const symbolStats = {};
    for (const trade of completed) {
      if (!symbolStats[trade.symbol]) {
        symbolStats[trade.symbol] = {
          trades: 0,
          wins: 0,
          totalProfit: 0,
          avgHoldTime: 0
        };
      }
      
      const stats = symbolStats[trade.symbol];
      stats.trades++;
      if (trade.profitLoss > 0) stats.wins++;
      stats.totalProfit += trade.profitLoss || 0;
      stats.avgHoldTime += trade.holdTime || 0;
    }
    
    // –§—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
    Object.keys(symbolStats).forEach(symbol => {
      const stats = symbolStats[symbol];
      stats.winRate = (stats.wins / stats.trades * 100);
      stats.avgHoldTime = stats.avgHoldTime / stats.trades / 1000 / 60; // —Ö–≤–∏–ª–∏–Ω–∏
    });
    
    // –ü–æ—à—É–∫ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
    const patterns = this.findPatterns(completed);
    
    return {
      totalTrades: trades.length,
      completedTrades: completed.length,
      activeTrades: trades.length - completed.length,
      winRate: (winners.length / completed.length * 100) || 0,
      avgProfit: winners.length > 0 ?
        winners.reduce((sum, t) => sum + t.profitLoss, 0) / winners.length : 0,
      avgLoss: losers.length > 0 ?
        losers.reduce((sum, t) => sum + Math.abs(t.profitLoss), 0) / losers.length : 0,
      profitFactor: this.calculateProfitFactor(winners, losers),
      symbolStats,
      patterns,
      recommendations: this.generateRecommendations(symbolStats, patterns)
    };
  }
  
  calculateProfitFactor(winners, losers) {
    const totalProfit = winners.reduce((sum, t) => sum + t.profitLoss, 0);
const totalLoss = losers.reduce((sum, t) => sum + Math.abs(t.profitLoss), 0);
   return totalLoss > 0 ? (totalProfit / totalLoss) : totalProfit;
 }
 
 findPatterns(trades) {
   const patterns = {
     bestTimeToTrade: null,
     bestCategory: null,
     optimalHoldTime: null,
     highVolumeBetter: false
   };
   
   // –ê–Ω–∞–ª—ñ–∑ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
   const hourStats = {};
   trades.forEach(trade => {
     const hour = new Date(trade.entryTime).getHours();
     if (!hourStats[hour]) {
       hourStats[hour] = { trades: 0, profit: 0 };
     }
     hourStats[hour].trades++;
     hourStats[hour].profit += trade.profitLoss || 0;
   });
   
   // –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É –≥–æ–¥–∏–Ω—É
   let bestHour = null;
   let bestHourProfit = -Infinity;
   Object.entries(hourStats).forEach(([hour, stats]) => {
     const avgProfit = stats.profit / stats.trades;
     if (avgProfit > bestHourProfit) {
       bestHourProfit = avgProfit;
       bestHour = parseInt(hour);
     }
   });
   patterns.bestTimeToTrade = bestHour;
   
   // –ê–Ω–∞–ª—ñ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö (—è–∫—â–æ —î –¥–∞–Ω—ñ)
   const categoryStats = {};
   trades.forEach(trade => {
     if (trade.notes) {
       try {
         const notes = JSON.parse(trade.notes);
         if (notes.category) {
           if (!categoryStats[notes.category]) {
             categoryStats[notes.category] = { trades: 0, profit: 0 };
           }
           categoryStats[notes.category].trades++;
           categoryStats[notes.category].profit += trade.profitLoss || 0;
         }
       } catch (e) {}
     }
   });
   
   if (Object.keys(categoryStats).length > 0) {
     patterns.bestCategory = Object.entries(categoryStats)
       .sort((a, b) => (b[1].profit / b[1].trades) - (a[1].profit / a[1].trades))[0]?.[0];
   }
   
   // –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è
   const profitableTradesWithTime = trades.filter(t => t.profitLoss > 0 && t.holdTime);
   if (profitableTradesWithTime.length > 0) {
     patterns.optimalHoldTime = profitableTradesWithTime
       .reduce((sum, t) => sum + t.holdTime, 0) / profitableTradesWithTime.length / 1000 / 60;
   }
   
   // –ö–æ—Ä–µ–ª—è—Ü—ñ—è –∑ –æ–±'—î–º–æ–º
   const highVolumeTrades = trades.filter(t => t.volume24h > 100000000);
   const lowVolumeTrades = trades.filter(t => t.volume24h <= 100000000);
   if (highVolumeTrades.length > 0 && lowVolumeTrades.length > 0) {
     const highVolumeWinRate = highVolumeTrades.filter(t => t.profitLoss > 0).length / highVolumeTrades.length;
     const lowVolumeWinRate = lowVolumeTrades.filter(t => t.profitLoss > 0).length / lowVolumeTrades.length;
     patterns.highVolumeBetter = highVolumeWinRate > lowVolumeWinRate;
   }
   
   return patterns;
 }
 
 generateRecommendations(symbolStats, patterns) {
   const recommendations = [];
   
   // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —á–∞—Å—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ
   if (patterns.bestTimeToTrade !== null) {
     recommendations.push(`–ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ: ${patterns.bestTimeToTrade}:00 - ${patterns.bestTimeToTrade + 1}:00`);
   }
   
   // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
   if (patterns.bestCategory) {
     recommendations.push(`–§–æ–∫—É—Å—É–π—Ç–µ—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${patterns.bestCategory}`);
   }
   
   // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —á–∞—Å—É —É—Ç—Ä–∏–º–∞–Ω–Ω—è
   if (patterns.optimalHoldTime) {
     recommendations.push(`–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è: ${patterns.optimalHoldTime.toFixed(0)} —Ö–≤–∏–ª–∏–Ω`);
   }
   
   // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –æ–±'—î–º—É
   if (patterns.highVolumeBetter) {
     recommendations.push("–¢–æ—Ä–≥—É–π—Ç–µ –º–æ–Ω–µ—Ç–∞–º–∏ –∑ –≤–∏—Å–æ–∫–∏–º –æ–±'—î–º–æ–º (>$100M –∑–∞ 24–≥)");
   }
   
   // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ —Å–∏–º–≤–æ–ª–∞—Ö
   const topSymbols = Object.entries(symbolStats)
     .filter(([_, stats]) => stats.trades >= 3)
     .sort((a, b) => b[1].winRate - a[1].winRate)
     .slice(0, 3);
   
   if (topSymbols.length > 0) {
     recommendations.push(`–¢–æ–ø —Å–∏–º–≤–æ–ª–∏: ${topSymbols.map(([s, stats]) => 
       `${s} (${stats.winRate.toFixed(0)}% win rate)`).join(', ')}`);
   }
   
   return recommendations;
 }
 
 async generateReport() {
   const analysis = await this.analyzeAllModes();
   
   console.log('\nüìä PERFORMANCE ANALYSIS REPORT');
   console.log('=' .repeat(50));
   
   for (const [mode, stats] of Object.entries(analysis)) {
     console.log(`\nüìà ${mode.toUpperCase()} MODE:`);
     console.log(`Total Trades: ${stats.totalTrades}`);
     console.log(`Win Rate: ${stats.winRate.toFixed(2)}%`);
     console.log(`Average Profit: ${stats.avgProfit.toFixed(2)}%`);
     console.log(`Average Loss: ${stats.avgLoss.toFixed(2)}%`);
     console.log(`Profit Factor: ${stats.profitFactor.toFixed(2)}`);
     
     if (stats.patterns.bestTimeToTrade !== null) {
       console.log(`Best Trading Hour: ${stats.patterns.bestTimeToTrade}:00`);
     }
     
     console.log('\nüí° Recommendations:');
     stats.recommendations.forEach(rec => console.log(`  ‚Ä¢ ${rec}`));
   }
   
   return analysis;
 }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (import.meta.url === `file://${process.argv[1]}`) {
 const analyzer = new PerformanceAnalyzer();
 analyzer.generateReport().catch(console.error);
}