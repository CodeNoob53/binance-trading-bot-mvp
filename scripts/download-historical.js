
// scripts/download-historical.js
import * as binance from '../src/binanceClient.js';
import * as db from '../src/database.js';
import logger from '../src/logger.js';
import { config } from '../src/config.js';
import { isSimulation, currentMode } from '../src/modes.js';
import { initializeBinanceClient } from '../src/binanceClient.js';
import { sleep } from '../src/utils.js';

const KLINE_INTERVAL = '1m'; // –¢–∞–π–º—Ñ—Ä–µ–π–º —Å–≤—ñ—á–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1 —Ö–≤–∏–ª–∏–Ω–∞)
const MAX_KLINES_PER_REQUEST = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç –¥–æ Binance API

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
const downloadConfig = {
  startDate: new Date('2025-03-01'),
  endDate: new Date('2025-06-16'),
  intervals: ['1m', '5m', '15m', '1h', '4h', '1d'],
  batchSize: 1000, // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –≤ –æ–¥–Ω–æ–º—É –±–∞—Ç—á—ñ
  delayBetweenBatches: 1000, // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ –≤ –º—Å
  delayBetweenRequests: 50, // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –≤ –º—Å
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
async function performStartupChecks() {
  logger.info('üöÄ Starting historical data download in ' + currentMode() + ' mode...');

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É
  if (isSimulation()) {
    logger.warn('‚ö†Ô∏è Running in simulation mode. This script should be run in testnet or production mode to download real data.');
    logger.warn('To download real data, run: yarn download-historical:testnet or yarn download-historical:production');
    process.exit(1);
  }

  logger.info('Checking configuration...');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É
  const mode = currentMode();
  if (!mode) {
    throw new Error('Bot mode is not set');
  }
  logger.info(`‚úÖ Bot mode: ${mode}`);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç
  logger.info('Checking date configuration...');
  if (downloadConfig.startDate >= downloadConfig.endDate) {
    throw new Error('Start date must be before end date');
  }
  if (downloadConfig.endDate > new Date()) {
    throw new Error('End date cannot be in the future');
  }
  logger.info(`‚úÖ Date range check passed: ${downloadConfig.startDate.toISOString()} to ${downloadConfig.endDate.toISOString()}`);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  logger.info('Checking database connection...');
  try {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –µ–∫—Å–ø–æ—Ä—Ç—É database.js
    await db.get('SELECT 1');
    logger.info('‚úÖ Database connection check passed');
  } catch (error) {
    logger.error('‚ùå Database connection failed:', error);
    throw error;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
  logger.info('Checking Binance connection...');
  try {
    const client = await initializeBinanceClient();
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ ping() –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
    const response = await client.ping();
    logger.info('‚úÖ Binance connection check passed');
  } catch (error) {
    logger.error('‚ùå Binance connection failed:', error);
    throw error;
  }

  logger.info('‚úÖ All startup checks completed successfully!');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö Klines –¥–ª—è —Å–∏–º–≤–æ–ª—É —Ç–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –∑–∞ –ø–µ—Ä—ñ–æ–¥
async function fetchAllKlines(symbol, interval, startTime, endTime) {
  logger.info(`Fetching ${interval} klines for ${symbol} from ${new Date(startTime).toISOString()} to ${new Date(endTime).toISOString()}`);
  let allKlines = [];
  let currentStartTime = startTime;

  while (currentStartTime < endTime) {
    try {
      // Binance API –ø–æ–≤–µ—Ä—Ç–∞—î Klines –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω, –¥–æ MAX_KLINES_PER_REQUEST.
      // –ú–∏ –¥–æ–¥–∞—î–º–æ 1 –¥–æ MAX_KLINES_PER_REQUEST, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —Å–≤—ñ—á–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ startTime
      const klines = await binance.getKlines(symbol, interval, currentStartTime, endTime, MAX_KLINES_PER_REQUEST);

      if (!klines || klines.length === 0) {
        logger.info(`No more klines found for ${symbol} at ${new Date(currentStartTime).toISOString()}.`);
        break;
      }

      // –î–æ–¥–∞—î–º–æ —Å–≤—ñ—á–∫–∏, –æ–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ—ó, —è–∫—â–æ –≤–æ–Ω–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ —è–∫ –ø–æ—á–∞—Ç–æ–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
      // –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫
      const klinesToProcess = klines.length === MAX_KLINES_PER_REQUEST ? klines.slice(0, -1) : klines;
      allKlines.push(...klinesToProcess);

      // –û–Ω–æ–≤–ª—é—î–º–æ currentStartTime –Ω–∞ OpenTime –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —Å–≤—ñ—á–∫–∏ + 1 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞
      // –ê–±–æ –Ω–∞ CloseTime –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–≤—ñ—á–∫–∏ + 1 –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
      // klines[klines.length - 1][6] - —Ü–µ closeTime –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–≤—ñ—á–∫–∏
      currentStartTime = klines[klines.length - 1][6] + 1;
      logger.info(`Fetched ${klines.length} klines for ${symbol}. Next start: ${new Date(currentStartTime).toISOString()}`);

      // –ó–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å Rate Limit Binance API
      await sleep(200); // 200–º—Å –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
    } catch (error) {
      logger.error(`Error fetching klines for ${symbol} from ${new Date(currentStartTime).toISOString()}: ${error.message}`);
      break; // –ü—Ä–∏–ø–∏–Ω—è—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
    }
  }
  return allKlines;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
async function downloadHistoricalData() {
  try {
    await performStartupChecks();
    
    logger.info('Starting historical data download...');
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const startDate = config.SIMULATION_START_DATE ? 
      new Date(config.SIMULATION_START_DATE).getTime() : 
      downloadConfig.startDate.getTime();
    const endDate = config.SIMULATION_END_DATE ? 
      new Date(config.SIMULATION_END_DATE).getTime() : 
      downloadConfig.endDate.getTime();

    logger.info(`Download period: ${new Date(startDate).toISOString()} to ${new Date(endDate).toISOString()}`);

    const exchangeInfo = await binance.getExchangeInfo();
    const usdtSymbols = exchangeInfo
      .filter(s => s.status === 'TRADING' && s.quoteAsset === 'USDT')
      .map(s => s.symbol);

    logger.info(`Found ${usdtSymbols.length} USDT trading pairs.`);

    let totalKlinesDownloaded = 0;
    let totalSymbolsProcessed = 0;
    let successfulSymbols = 0;

    for (const symbol of usdtSymbols) {
      try {
        totalSymbolsProcessed++;
        logger.info(`Processing ${symbol} (${totalSymbolsProcessed}/${usdtSymbols.length})...`);

        const klines = await fetchAllKlines(symbol, KLINE_INTERVAL, startDate, endDate);

        if (klines.length > 0) {
          logger.info(`Saving ${klines.length} ${KLINE_INTERVAL} klines for ${symbol} to database...`);
          for (const kline of klines) {
            await db.saveKline({
              symbol: symbol,
              interval: KLINE_INTERVAL,
              openTime: kline[0],
              open: parseFloat(kline[1]),
              high: parseFloat(kline[2]),
              low: parseFloat(kline[3]),
              close: parseFloat(kline[4]),
              volume: parseFloat(kline[5]),
              closeTime: kline[6],
              quoteAssetVolume: parseFloat(kline[7]),
              numberOfTrades: kline[8],
              takerBuyBaseAssetVolume: parseFloat(kline[9]),
              takerBuyQuoteAssetVolume: parseFloat(kline[10])
            });
          }
          totalKlinesDownloaded += klines.length;
          successfulSymbols++;
          logger.info(`‚úÖ Finished saving klines for ${symbol}. Total klines: ${klines.length}`);
        } else {
          logger.warn(`‚ö†Ô∏è No ${KLINE_INTERVAL} klines found for ${symbol} in the specified period.`);
        }

        // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
        if (totalSymbolsProcessed % 10 === 0) {
          logger.info(`Processed ${totalSymbolsProcessed} symbols, taking a break...`);
          await sleep(2000); // 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ—Ä–≤–∏ –∫–æ–∂–Ω—ñ 10 —Å–∏–º–≤–æ–ª—ñ–≤
        }

      } catch (error) {
        logger.error(`‚ùå Error processing ${symbol}:`, error.message);
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
        continue;
      }
    }

    logger.info('\nüìä Download Summary:');
    logger.info(`Total symbols processed: ${totalSymbolsProcessed}/${usdtSymbols.length}`);
    logger.info(`Successful symbols: ${successfulSymbols}`);
    logger.info(`Total klines downloaded: ${totalKlinesDownloaded}`);
    logger.info('‚úÖ Historical data download process finished successfully!');
  } catch (error) {
    logger.error('‚ùå Failed to download historical data:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
downloadHistoricalData().catch(error => {
  logger.error('Unhandled error in historical data download script:', error);
  process.exit(1);
});