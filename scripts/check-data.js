// scripts/check-data.js
import * as db from '../src/database.js';
import logger from '../src/logger.js';

async function checkData() {
  try {
    logger.info('üîç Checking saved historical data...');
    
    // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å klines
    const totalKlines = await db.getKlinesCount();
    logger.info(`üìä Total klines saved: ${totalKlines}`);
    
    if (totalKlines === 0) {
      logger.warn('‚ùå No klines found in database');
      return;
    }
    
    // –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏
    const symbolsWithData = await db.getSymbolsWithData('1m');
    logger.info(`üìà Symbols with data: ${symbolsWithData.length}`);
    
    // –¢–æ–ø-10 —Å–∏–º–≤–æ–ª—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤
    const topSymbols = symbolsWithData
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);
    
    logger.info('üèÜ Top 10 symbols by data count:');
    topSymbols.forEach(item => {
      logger.info(`  ${item.symbol}: ${item.count} klines`);
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É
    const btcKlines = await db.getKlines('BTCUSDT', '1m', 
      new Date('2024-01-01').getTime(), 
      new Date('2024-01-02').getTime()
    );
    logger.info(`ü™ô BTCUSDT sample data for Jan 1, 2024: ${btcKlines.length} klines`);
    
    if (btcKlines.length > 0) {
      const sample = btcKlines[0];
      logger.info(`  Sample kline: Open=${sample.open}, High=${sample.high}, Low=${sample.low}, Close=${sample.close}`);
    }
    
    logger.info('‚úÖ Data check completed!');
    
  } catch (error) {
    logger.error('‚ùå Error checking data:', error);
  }
}

checkData();